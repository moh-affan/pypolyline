environment:
  global:
    REPO_DIR: pypolyline
    PACKAGE_NAME: pypolyline
    BUILD_COMMIT: master
    BUILD_DEPENDS: "cython"
    TEST_DEPENDS: "nose"
    TARBALL_KEY:
      secure: MqX/OpgZLeuXwE5bkFELrVsgyWaCxePXBPVBnPo8jbhIahAvVqvlJSsQbETgypXS

  matrix:
    - PYTHON: "C:\\Miniconda"
      PYTHON_VERSION: "2.7"
      ZIP_VERSION: "cp27"
      PYTHON_ARCH: "32"
      TARGET: "i686-pc-windows-msvc"
    - PYTHON: "C:\\Miniconda-x64"
      PYTHON_VERSION: "2.7"
      ZIP_VERSION: "cp27"
      PYTHON_ARCH: "64"
      TARGET: "x86_64-pc-windows-msvc"
    - PYTHON: "C:\\Miniconda35"
      PYTHON_VERSION: "3.5"
      ZIP_VERSION: "cp35"
      PYTHON_ARCH: "32"
      TARGET: "i686-pc-windows-msvc"
    - PYTHON: "C:\\Miniconda35-x64"
      PYTHON_VERSION: "3.5"
      ZIP_VERSION: "cp35"
      PYTHON_ARCH: "64"
      TARGET: "x86_64-pc-windows-msvc"
    - PYTHON: "C:\\Miniconda36"
      PYTHON_VERSION: "3.6"
      ZIP_VERSION: "cp36"
      PYTHON_ARCH: "32"
      TARGET: "i686-pc-windows-msvc"
    - PYTHON: "C:\\Miniconda36-x64"
      PYTHON_VERSION: "3.6"
      ZIP_VERSION: "cp36"
      PYTHON_ARCH: "64"
      TARGET: "x86_64-pc-windows-msvc"

# We always use a 64-bit machine, but can build x86 distributions
# with the TARGET_ARCH variable.
platform:
    - x64

matrix:
    fast_finish: true

install:
    # Install miniconda and fix headers
    - ps: .\\ci\\appveyor\\missing-headers.ps1
    - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PYTHON%\Library\bin;%PATH%
    - SET PATH=%PATH%;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin
    - conda info

    # Check that we have the expected version and architecture for Python
    - python --version
    - python -c "import struct; print(struct.calcsize('P') * 8)"

build_script:
  # Install build requirements
  - conda install -q --yes --file dev-requirements.txt
  # get correct Rust DLL
  - python ci/pre_install.py
  # build wheel
  - "%CMD_IN_ENV% pip wheel . -w dist/ --no-deps"
  - ls dist/*
  # dump polyline dll dependencies
  - dumpbin /dependents pypolyline/polyline_ffi.dll > dumpbin_polyline_dll.txt
  - appveyor PushArtifact dumpbin_polyline_dll.txt

test_script:
  # create test env
  # - conda create --yes -n test_env python=%PYTHON_VERSION% %TEST_DEPENDS%
  # - activate test_env
  # - pip install -r dev-requirements.txt
  # install from wheel
  - mkdir test
  - cd test
  - pip install %PACKAGE_NAME% --no-index -f C:/projects/%PACKAGE_NAME%/dist
  - nosetests -v %PACKAGE_NAME%

after_test:
  - cd C:/projects/%PACKAGE_NAME%
  # generate pyd in-place, so I can peer at its dependencies
  # this breaks on Python 3 bc the pyd is named cutil.cp3x-winxx
  # - python setup.py build_ext --inplace
  # - dumpbin /dependents %PACKAGE_NAME%/cutil.pyd > dumpbin_pyd.txt
  # - appveyor PushArtifact dumpbin_pyd.txt

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*

before_deploy:
  # Generate artifacts for release
  - cd C:/projects/%PACKAGE_NAME%/dist
    # release zipfile will look like 'pypolyline-v1.2.3-x86_64-pc-windows-gnu'
  - 7z a ../%PACKAGE_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%-%ZIP_VERSION%.zip *
  - appveyor PushArtifact ../%PACKAGE_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%-%ZIP_VERSION%.zip

deploy:
  appveyor_repo_tag: true
  tag: $(APPVEYOR_REPO_TAG_NAME)
  release: $(APPVEYOR_REPO_TAG_NAME)
  description: 'Binaries'
  provider: GitHub
  auth_token:
    secure: I0zmEE6D6PkOwG84SJ7egzQzvv1nudq9SBwwALYh7BtWHx3wEMK8IjNT3d1Mbp2e
  artifact: /.*\.zip/
  draft: false
  prerelease: false
  on:
    appveyor_repo_tag: true

branches:
  only:
    - master
    - /v\d\.\d\.\d/
