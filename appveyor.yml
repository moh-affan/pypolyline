environment:
  global:
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci\\run_with_env.cmd"
    PROJECT_NAME: pypolyline
    TARBALL_KEY:
      secure: MqX/OpgZLeuXwE5bkFELrVsgyWaCxePXBPVBnPo8jbhIahAvVqvlJSsQbETgypXS

  matrix:

    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.11"
      PYTHON_ARCH: "64"
      PYTHON_RELEASE_VERSION: "cp27"
      TARGET: x86_64-pc-windows-gnu
      CHANNEL: stable
      PLATFORM: "win-amd64"

    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.11"
      TARGET: i686-pc-windows-gnu
      PYTHON_ARCH: "32"
      PYTHON_RELEASE_VERSION: "cp27"
      CHANNEL: stable
      PLATFORM: "win32"

    # MinGWPy isn't yet available for Python 3.5
    - PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4.3"
      TARGET: x86_64-pc-windows-gnu
      PYTHON_ARCH: "64"
      PYTHON_RELEASE_VERSION: "cp35"
      CHANNEL: stable
      PLATFORM: "win-amd64"

install:
  - set OLDPATH=%PATH%
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - set PATH=C:\Miniconda\Scripts
  - ps: If ($env:PYTHON_ARCH -Match "64") {$env:PATH="C:\Miniconda-x64\Scripts"}
  - set PATH=%PATH%;%OLDPATH%
  # - set %PATH%=%PATH%;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin
  # - "%CMD_IN_ENV% dumpbin /dependents foo.dll"
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda create -q --name python%PYTHON_VERSION% python=%PYTHON_VERSION% 
  - activate python%PYTHON_VERSION%
  - pip install --disable-pip-version-check --user --upgrade pip
  - pip install -i https://pypi.anaconda.org/carlkl/simple mingwpy
  - conda install -q --name python%PYTHON_VERSION% --file dev-requirements.txt

build_script:
  # get correct Rust DLL
  - python.exe ci/pre_install.py"
  - python.exe setup.py config --compiler=mingw32
  - python.exe setup.py build --compiler=mingw32
  - python.exe setup.py bdist_wheel

test_script:
  # Run the project tests outside the project root, because it's on the PYTHONPATH
  - md to_test
  - cd to_test
  - pip install %PROJECT_NAME% --no-index -f C:/projects/%PROJECT_NAME%/dist
  - nosetests %PROJECT_NAME%

after_test:
  # - cd C:/projects/%PROJECT_NAME%
  # needlessly generate pyd in-place, so I can peer at its dependencies
  # - python.exe setup.py build_ext --inplace
  # - "%CMD_IN_ENV% dumpbin /dependents %PROJECT_NAME%/cutil.pyd"
  # - "%CMD_IN_ENV% dumpbin /dependents %PROJECT_NAME%/polyline_ffi.dll"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*

before_deploy:
  # Generate artifacts for release
  - cd C:/projects/%PROJECT_NAME%/dist
    # release zipfile will look like 'pypolyline-v1.2.3-x86_64-pc-windows-gnu'
  - 7z a ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%-%PYTHON_RELEASE_VERSION%.zip *
  - appveyor PushArtifact ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%-%PYTHON_RELEASE_VERSION%.zip

deploy:
  appveyor_repo_tag: true
  tag: $(APPVEYOR_REPO_TAG_NAME)
  release: $(APPVEYOR_REPO_TAG_NAME)
  description: 'Binaries'
  provider: GitHub
  auth_token:
    secure: Zf4mGDVPLLpkbZCecvbunvTyQZPpNl4Q66CrMuu/XXVDDnjOoFf5qnHYC1U/zo9Z
  artifact: /.*\.zip/
  draft: false
  prerelease: false
  on:
    appveyor_repo_tag: true
    CHANNEL: stable

branches:
  only:
    - master
    - /v\d\.\d\.\d/
